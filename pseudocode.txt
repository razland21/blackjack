BUGS
[-] 2. Double after split: I hit 21, so it told me that. I shouldn't announce it when doubling.  It should say card dealt [DAS-bugs.txt, line 102]
[-] 5. if player splits hands, then gets 21 on a split, player is prompted to hit/stand.  should move forward.  [DAS-bugs.txt, dump 3]  If first two cards are dealt, and third one is dealt to get 21, it works fine.
---> add a check in player_play() for 21. 
[] 8. Split - hit 21, didn't go to 2nd hand?  (not sure if this actually happened)

In Progress


Backlog
- multiple players 
---> think about how board prints...show as player's turns happen?
---> need to convert players into list since order will matter
- option to use multiple decks
- insurance if dealer is showing A
- change settings for rules
- player(s) can input their own name
- bets can be floats
- how to handle both player and dealer having blackjack?  Currently draw.

--------------------------------

Completed Tasks
+ main menu
+ betting
+ allow for doubling down on 10/11 (supports any rules defined in dictionary)
+ change print_hand(): show_dealer_hand argument should be hide_card argument that takes a digit representing which card to hide (starting at 0)
+ changing functions to take in index as optional argument (for splitting)
+ change print_board() to handle printing split hands
+ allow for splitting pairs
---> need to review process_split - finish writing.
+ make all end game fall into check_winner (i.e. if dealer has 21, change everyone's status to loss)
---> if player status == loss, no need to recheck win
+ change all printing of results to include player/hand names for clarity
+ change check_winner() to handle checking split hands
+ create get_hand() to get all hands of a player or specific hand if num is provided.
+ hide card dealt from doubling down (currently doesn't print updated board with the hit showing... should print after bet is made)
+ change shuffle mechanic to use shuffle() OR optimize used_cards_indices: make into a list of 1/0 to indicate whether a card has been used or not (each index corresponds to the index of the card, so used_cards[num] = 1)
+ bust after split, no notification that the hand busted, therefore turn over.
+ view rules

Completed Bugs
[+] 1. Double after split: Hand 2 printed after hand 1, but before hand 2 turn.  [DAS-bugs.txt, line 92]
[+] 3. After doubling, needs to say that turn is over.  (encountered this during double after split -- see DAS-bugs.txt, 2nd dump, also happens for regular doubles)
[+] 4. Calculate_change() needs to take into account which bet to change with!
[+] 7. Full board is printing twice. [DAS-bugs.txt, dump 4]
[+] 6. Split then bust, board doesn't print to show busted card.  [DAS-bugs.txt, dump 4]


MVP
+ single player: 1 player vs AI
+ main game loop
+ dealer stops at 17 (including soft 17)
+ no betting


----------------------------------------------------------------------------------------------
***PLAYER DICTIONARY***
hand: [[]] - a list of a list containing cards
money: [int] - a list of ints, one for each hand
bet: int
status: [string] - playing, win, loss, done, doubling, draw

----------------------------------------------------------------------------------------------
***RULES DICTIONARY***
-min_bet: int value
-win/blackjack/loss: multipliers
-doubling_allowed: list of cards where doubling down is allowed
-shuffle: min number of cards left in deck to be able to do another round (i.e. if current deck is less than this, then shuffle)
-num_decks: number of decks to be used in-game (currently does nothing)

min_bet: 1
win: 1
blackjack: 1.5
loss: -1
doubling_allowed: [10, 11]
shuffle: 15
num_decks: 1

----------------------------------------------------------------------------------------------
***SPLITTING PSEUDOCODE***

Things to Track:
- which card was split 
- which hand has been processed

Code Outline:

[fn] check if hand can be split
	- if yes, show option in player options list to split
	- if no, do not show option in player options list

[fn-edit] check_valid_move 
	- if player selects option to split, check whether it is a valid move for that hand
	- if yes, continue. otherwise, have player select another option

if player chooses to split
	- check if player has enough money to do so
		- if yes, continue
		- if no...continue anyway?
	- split hand into two hands
		- process each hand separately

----------------------------------------------------------------------------------------------
***DOUBLING PSEUDOCODE***

Code Outline:

[fn] check if card can be doubled - reference doubling_allowed in rules dictionary
	- if yes, show option in player options list
	- if no, do not show option in player options list

[fn-edit] check_valid_move 
	- if player selects option to double, check whether it is a valid move for that hand
	- if yes, continue. otherwise, have player select another option

if player chooses to double
	- check if player has enough money to do so
		- if yes, continue
		- if no...continue anyway?
	- give one card
	- end player's turn
	
Notes:
	- ideally, card should not be revealed until after game over  (probably do this after MP added)
		- if not, then reveal card when it is dealt, check if player busted


----------------------------------------------------------------------------------------------
***BETTING PSEUDOCODE***

Things to Track:
	- how much currency a player has
	- amount bet for current game
	

Assumptions:
	- minimum bet: 1
	- bets can only be ints  (TBD if floats will be supported later)
	- each game starts with $100.


Betting Rules:
	- if player gets blackjack, they earn 1.5x their bet
	- draw = no money lost


Code Outline:

ask for bet
[fn] check if valid bet
[fn] check if player has enough to make that bet
	- if yes, continue
	- if no, ask for bet again

[game play]

if win, [fn] add amount that player bet to their total
if lost, [fn] subtract amount that player bet from their total
--> assumes total will never be < 0
else, do nothing (draw)


----------------------------------------------------------------------------------------------
***MVP PSEUDOCODE***

notation:
[fn] - function to write
[*fn] - function already exists in outline

things to define:
	- card deck: a list of tuples, each tuple representing a card

things to keep track of:
	- how many cards in the deck have been used (i.e. how many are remaining for play)
	- which cards have already been used
	- hands for player and dealer (dictionary?)
	- player win status

code outline:

[fn] main function to start blackjack game

	[fn] shuffle deck if needed
	[fn] deal cards
	[fn] print game board -- showing player's 2 cards and dealer's 2nd card only
	[fn] check if player has 21 to start 
			- if yes, automatic win (later - draw if both have 21)
			- if no, continue
	[fn] check if dealer has 21 to start
			- if yes, automatic lose
	
	*** PLAYER GAME LOOP START ***
	[fn] print gameplay options
			- hit
			- stand
			[more later]
	ask player to choose option
	
	if player chooses hit, give player another card.
		[fn] hit
		[*fn] print game board -- showing new card added to player's hand
		[*fn] check if player has 21 -- if yes, turn is over (not automatic win)
		[fn] check if player is over 21 -- if yes, automatic lose
	
	if player chooses stand, player turn ends.
	
	*** PLAYER GAME LOOP END ***
	
	*** DEALER GAME LOOP START ***
	[*fn] print game board -- show both of dealer's cards  [print game board needs to take y/n argument for showing dealer's other card]
			- if player has already lost, end here.
			
	[*fn] check if dealer is busted -- if yes, turn is over, player automatically wins
	[*fn] check if dealer has 17 
		- if yes, dealer's turn is over (not automatic win)
		- if no, hit again
	
	
	*** DEALER GAME LOOP END ***
			
	*** CHECK FOR WINNER ***
	if player already won/lost, then done.  
	else:
	[fn] check who has higher number, dealer or winner

individual functions:

[fn] shuffle deck
	clear list of already used cards

[fn] deal_cards (num_cards)
	cards = []
	for number of cards needed:
		generate random number between 0-51
		check if number has already been used during this shuffle
			if yes, generate another number
			if no, 
				add number to already used list
				add corresponding card to cards list
	return cards
	
	
[fn] print_board (all_hands, show_dealer_hand)
	show_dealer_hand: if True, then show all cards in dealer hand.  if False, only show one card (assumes only 2 cards if no).
	print "DEALER:"
		if show_dealer_hand = yes:
			print '[]' + dealer[1]  
			else:
			for all cards in deck
				print card
	
	print "PLAYER:"
		for all cards in deck
			print card
	
[fn] check_21 (hand)
	sum_hand = sum_cards(hand)
	has_ace = False
	
	check if ace is in deck - if yes, has_ace = True
	
	if sum_hand = 21,
		return True
	if has_ace = True,
		check sum_hand-10 = 21
	else return False

[fn] check_busted (hand)
	if sum_cards(hand) > 21, return True

[fn] sum_cards (hand)
	sum_hand = 0
	for all cards in hand
		add value to hand
		if J/Q/K, add 10
		if A,
			add 11

	return sum_hand

[fn] print_options()
	Choose from the following options:
	1 - Hit
	2 - Stand

[fn] hit(hand)
	deal_cards(1) -- returns list of one card
	add card to deck 
	
[fn] check_winner(dealer_hand, player_hand)

----------------------------------------------------------------------------------------------